
template<typename VecType>
VecType pdfnorm(const VecType& x, const VecType& Mu, const VecType& Sigma) {
    VecType pdf = exp(-0.5 * square(x - Mu) / square(Sigma)) / (sqrt(2.0 * arma::datum::pi) * Sigma);
    for (size_t i = 0; i < pdf.size(); i++) {
        if (pdf(i) == 0.0)
            pdf(i) = 2.22507e-24;
    }
    return pdf;
}


template<typename VecType>
VecType stddens(const typename VecType::elem_type& x, const VecType& Mu, const VecType& Sigma, const VecType& Nu) {
    const size_t K = Nu.size();
    VecType a(K);
    VecType b(K);
    VecType pdf(K);
    
    for (size_t i = 0; i < K; i++) {
        a(i) = Rf_gammafn((Nu(i) + 1.0) / 2.0) / (sqrt(arma::datum::pi * (Nu(i) - 2)) * Sigma(i));
        b(i) = Rf_gammafn(Nu(i) / 2.0) * pow((1 + pow((x - Mu(i)), 2) / (pow(Sigma(i), 2) * (Nu(i) - 2))), ((Nu(i) + 1) / 2));
    }
    
    pdf = a / b;
    
    return pdf;
}




template<typename VecType>
double MixtDensityScale(const VecType& vOmega, const VecType& vD_log, const int& M) {
  VecType wp_log = log(vOmega) + vD_log;
  
  double dK = max(wp_log);
  
  VecType wp_log_scaled = wp_log - dK;
  
  double dLK = 0;
  for (int i = 0; i < M; i++) {
    dLK += exp(wp_log_scaled(i));
  }
  
  double dLLK = dK + log(dLK);
  
  if (dLLK < -1e150) {
    dLLK = -1e50;
  }
  
  return dLLK;
}


template<typename VecType, typename MatType>
double getLLK(const VecType& vY, const MatType& mMu, const MatType& mSigma2, const MatType& mWeight,
              const std::string& iDist, const VecType& Nu) {
    int iT = vY.size();
    int K = mMu.n_rows;
    VecType vLLK(iT);

    for (int i = 0; i < iT; i++) {
        double y = vY(i);
        const VecType& muCol = mMu.col(i);
        const VecType& sigmaCol = sqrt(mSigma2.col(i));

        if (iDist == "norm") {
            vLLK(i) = MixtDensityScale(mWeight.col(i), log(vPdfnorm(y, muCol, sigmaCol, K)), K);
        } else if (iDist == "std") {
            vLLK(i) = MixtDensityScale(mWeight.col(i), log(vStddens(y, muCol, sigmaCol, Nu)), K);
        }
    }

    double output = accu(vLLK);
    return output;
}
